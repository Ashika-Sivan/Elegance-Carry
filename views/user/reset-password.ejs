<%- include("../../views/layouts/user/header") %>
<div class="auth-container">
    <div class="logo-container">
    </div>
    <div class="auth-box">
        <h1 class="text-center">Change Password</h1>
        <form method="POST" action="/reset-password" onsubmit="return validateForm()">
            <label class="form-label" for="newPass1">New Password</label>
<div class="input-group password-wrapper">
    <input class="form-control" name="newPass1" id="newPass1" type="password" required>
    <span class="toggle-password" onclick="togglePassword('newPass1')">üëÅÔ∏è</span>
</div>
            <div id="newPass1Error" class="text-danger"></div>
            
           
            <div class="password-strength-container">
                <div class="password-strength-bar">
                    <div id="strengthBar" class="strength-fill"></div>
                </div>
                <span id="strengthText" class="strength-text">Password Strength</span>
            </div>
            
        
            <div class="password-requirements">
                <div class="requirement" id="lengthReq">
                    <span class="req-icon">‚úó</span>
                    <span class="req-text">At least 8 characters</span>
                </div>
                <div class="requirement" id="uppercaseReq">
                    <span class="req-icon">‚úó</span>
                    <span class="req-text">One uppercase letter</span>
                </div>
                <div class="requirement" id="lowercaseReq">
                    <span class="req-icon">‚úó</span>
                    <span class="req-text">One lowercase letter</span>
                </div>
                <div class="requirement" id="numberReq">
                    <span class="req-icon">‚úó</span>
                    <span class="req-text">One number</span>
                </div>
                <div class="requirement" id="specialReq">
                    <span class="req-icon">‚úó</span>
                    <span class="req-text">One special character (!@#$%^&*)</span>
                </div>
            </div>
           
            <label class="form-label" for="newPass2">Re-enter New Password</label>
<div class="input-group password-wrapper">
    <input class="form-control" name="newPass2" id="newPass2" type="password" required>
    <span class="toggle-password" onclick="togglePassword('newPass2')">üëÅÔ∏è</span>
</div>
            <div id="newPass2Error" class="text-danger"></div>
           
            <button type="submit" class="btn btn-primary" id="submitBtn" disabled>Change Password</button>
           
            <% if (locals.message && message.length > 0) { %>
                <div class="alert alert-danger">
                    <i class="fa fa-exclamation-circle"></i> <%= message %>
                </div>
            <% } %>
        </form>
        <p class="text-center footer-links">Don't have an account? <a href="/signup">Sign up</a></p>
    </div>
</div>
<%- include("../../views/layouts/user/footer") %>


<script>
let passwordRequirements = {
    length: false,
    uppercase: false,
    lowercase: false,
    number: false,
    special: false
};

function checkPasswordStrength(password) {
    let strength = 0;
    const requirements = {
        length: password.length >= 8,
        uppercase: /[A-Z]/.test(password),
        lowercase: /[a-z]/.test(password),
        number: /\d/.test(password),
        special: /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/.test(password)
    };
    
    passwordRequirements = requirements;
    

    updateRequirementStatus('lengthReq', requirements.length);
    updateRequirementStatus('uppercaseReq', requirements.uppercase);
    updateRequirementStatus('lowercaseReq', requirements.lowercase);
    updateRequirementStatus('numberReq', requirements.number);
    updateRequirementStatus('specialReq', requirements.special);
    

    Object.values(requirements).forEach(req => req && strength++);
    
 
    updateStrengthBar(strength);
    
   
    const allMet = Object.values(requirements).every(req => req);
    document.getElementById('submitBtn').disabled = !allMet;
    
    return strength;
}

function updateRequirementStatus(elementId, isMet) {
    const element = document.getElementById(elementId);
    const icon = element.querySelector('.req-icon');
    
    if (isMet) {
        element.classList.add('met');
        icon.textContent = '‚úì';
    } else {
        element.classList.remove('met');
        icon.textContent = '‚úó';
    }
}

function updateStrengthBar(strength) {
    const strengthBar = document.getElementById('strengthBar');
    const strengthText = document.getElementById('strengthText');
    
    const strengthLevels = [
        { width: '20%', color: '#ff4757', text: 'Very Weak' },
        { width: '40%', color: '#ff6b7a', text: 'Weak' },
        { width: '60%', color: '#ffa502', text: 'Fair' },
        { width: '80%', color: '#7bed9f', text: 'Good' },
        { width: '100%', color: '#2ed573', text: 'Strong' }
    ];
    
    if (strength === 0) {
        strengthBar.style.width = '0%';
        strengthText.textContent = 'Password Strength';
        strengthText.style.color = '#666';
        return;
    }
    
    const level = strengthLevels[strength - 1];
    strengthBar.style.width = level.width;
    strengthBar.style.backgroundColor = level.color;
    strengthText.textContent = level.text;
    strengthText.style.color = level.color;
}

function validatePasswordMatch() {
    const newPass1 = document.getElementById('newPass1').value;
    const newPass2 = document.getElementById('newPass2').value;
    const newPass2Error = document.getElementById('newPass2Error');
    
    if (newPass2 && newPass1 !== newPass2) {
        newPass2Error.textContent = 'Passwords do not match.';
        return false;
    } else {
        newPass2Error.textContent = '';
        return true;
    }
}

function checkCommonPasswords(password) {
    const commonPasswords = [
        'password', '123456', '123456789', 'qwerty', 'abc123', 
        'password123', 'admin', 'letmein', 'welcome', 'monkey',
        '1234567890', 'dragon', 'master', 'hello', 'login'
    ];
    
    return commonPasswords.includes(password.toLowerCase());
}

function validateForm() {
    const newPass1 = document.getElementById('newPass1').value;
    const newPass2 = document.getElementById('newPass2').value;
    const newPass1Error = document.getElementById('newPass1Error');
    
 
    newPass1Error.textContent = '';
    
  
    const allRequirementsMet = Object.values(passwordRequirements).every(req => req);
    
    if (!allRequirementsMet) {
        newPass1Error.textContent = 'Please meet all password requirements.';
        return false;
    }
  
    if (checkCommonPasswords(newPass1)) {
        newPass1Error.textContent = 'This password is too common. Please choose a more secure password.';
        return false;
    }
    

    if (!validatePasswordMatch()) {
        return false;
    }
    
    return true;
}


document.getElementById('newPass1').addEventListener('input', function() {
    checkPasswordStrength(this.value);
});

document.getElementById('newPass2').addEventListener('input', function() {
    validatePasswordMatch();
});


document.getElementById('newPass1').addEventListener('keyup', function() {
    checkPasswordStrength(this.value);
});

document.getElementById('newPass2').addEventListener('keyup', function() {
    validatePasswordMatch();
});




function togglePassword(id) {
    const field = document.getElementById(id);
    field.type = field.type === "password" ? "text" : "password";
}

</script>


<style>
.auth-container {
    max-width: 450px;
    margin: 50px auto;
    padding: 20px 0;
    font-family: Arial, sans-serif;
}

.logo-container {
    text-align: center;
    margin-bottom: 20px;
}

.auth-box {
    background: #fff;
    padding: 30px;
    border-radius: 8px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
}

.form-label {
    font-weight: bold;
    font-size: 14px;
    margin-bottom: 5px;
    margin-top: 15px;
    display: block;
}

.form-control {
    width: 100%;
    height: 40px;
    padding: 8px 12px;
    border: 1px solid #ccc;
    border-radius: 5px;
    font-size: 14px;
    transition: border-color 0.3s;
}

.form-control:focus {
    border-color: #ff3f6c;
    box-shadow: 0 0 3px 2px rgba(255, 63, 108, 0.3);
    outline: none;
}

/* Password Strength Indicator */
.password-strength-container {
    margin: 10px 0;
}

.password-strength-bar {
    width: 100%;
    height: 8px;
    background-color: #e0e0e0;
    border-radius: 4px;
    overflow: hidden;
    margin-bottom: 5px;
}

.strength-fill {
    height: 100%;
    width: 0%;
    transition: width 0.3s ease, background-color 0.3s ease;
    border-radius: 4px;
}

.strength-text {
    font-size: 12px;
    font-weight: bold;
    color: #666;
}

/* Password Requirements */
.password-requirements {
    margin: 15px 0;
    padding: 15px;
    background-color: #f8f9fa;
    border-radius: 5px;
    border-left: 4px solid #e0e0e0;
}

.requirement {
    display: flex;
    align-items: center;
    margin: 5px 0;
    font-size: 13px;
    transition: color 0.3s ease;
}

.requirement.met {
    color: #2ed573;
}


.req-icon {
    width: 16px;
    height: 16px;
    margin-right: 8px;
    font-weight: bold;
    font-size: 12px;
}

.requirement.met .req-icon {
    color: #2ed573;
}

.requirement:not(.met) .req-icon {
    color: #ff4757;
}

.req-text {
    flex: 1;
}

.btn-primary {
    width: 100%;
    height: 45px;
    background: #ff3f6c;
    border: none;
    color: white;
    font-size: 16px;
    font-weight: bold;
    border-radius: 5px;
    cursor: pointer;
    transition: background 0.3s, opacity 0.3s;
    margin-top: 20px;
}

.btn-primary:hover:not(:disabled) {
    background: #e6365d;
}

.btn-primary:disabled {
    background: #cccccc;
    cursor: not-allowed;
    opacity: 0.6;
}

.footer-links {
    text-align: center;
    font-size: 14px;
    color: #555;
    margin-top: 20px;
}

.footer-links a {
    color: #ff3f6c;
    text-decoration: none;
    font-weight: bold;
}

.footer-links a:hover {
    text-decoration: underline;
}

.text-danger {
    color: #ff4757;
    font-size: 12px;
    margin-top: 5px;
    font-weight: 500;
}

.alert {
    padding: 10px 15px;
    margin: 15px 0;
    border-radius: 5px;
    font-size: 14px;
}

.alert-danger {
    background-color: #f8d7da;
    border: 1px solid #f5c6cb;
    color: #721c24;
}

.text-center {
    text-align: center;
}

h1 {
    color: #333;
    margin-bottom: 25px;
    font-size: 24px;
}

.password-wrapper {
    position: relative;
}

.toggle-password {
    position: absolute;
    right: 10px;
    top: 50%;
    transform: translateY(-50%);
    cursor: pointer;
    user-select: none;
    font-size: 18px;
    color: #333;
}

</style>