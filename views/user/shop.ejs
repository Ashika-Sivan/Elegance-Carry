<%- include("../../views/layouts/user/header") %>

<style>
  .shop-content {
    padding: 20px;
    background-color: #fff;
  }
  .active-filter {
    color: #ff3f6c;
    font-weight: bold;
  }

  .search-bar {
    display: flex;
    justify-content: center;
    margin-bottom: 20px;
  }
  .search-input {
    width: 400px;
    padding: 12px;
    border: 1px solid #ddd;
    border-radius: 20px;
    outline: none;
    font-size: 14px;
  }

  .sort-bar {
    margin-bottom: 20px;
  }

  .sort-dropdown {
    position: relative;
    display: inline-block;
  }

  .sort-button {
    background-color: white;
    border: 1px solid #d4d5d9;
    padding: 8px 16px;
    border-radius: 3px;
    cursor: pointer;
    font-size: 13px;
    color: #282c3f;
    font-weight: 600;
    text-transform: uppercase;
    display: flex;
    align-items: center;
    gap: 8px;
    min-width: 200px;
    transition: all 0.2s ease;
  }

  .sort-button:hover {
    border-color: #ff3f6c;
    color: #ff3f6c;
  }

  .sort-options {
    display: none;
    position: absolute;
    top: 100%;
    left: 0;
    background-color: white;
    border: 1px solid #d4d5d9;
    border-radius: 3px;
    width: 100%;
    margin-top: 4px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    z-index: 1000;
  }

  .sort-options div {
    padding: 12px 16px;
    cursor: pointer;
    font-size: 13px;
    color: #282c3f;
    transition: all 0.2s ease;
  }

  .sort-options div:hover {
    background-color: #f5f5f6;
    color: #ff3f6c;
  }

  .sort-options div:not(:last-child) {
    border-bottom: 1px solid #f5f5f6;
  }

  .sort-button::after {
    content: '▼';
    font-size: 10px;
    margin-left: auto;
  }

  .sort-button.active {
    border-color: #ff3f6c;
    color: #ff3f6c;
  }

  body {
    font-family: Arial, sans-serif;
    background-color: #f5f5f5;
  }
  .container {
    max-width: 1300px;
    margin: 20px auto;
    display: flex;
    gap: 20px;
  }

  .pagination {
    display: flex;
    justify-content: center;
    gap: 10px;
    margin: 20px 0;
  }

  .pagination a {
    padding: 8px 12px;
    background-color: #f0f0f0;
    border: 1px solid #ddd;
    color: #333;
    text-decoration: none;
  }

  .pagination .active {
    background-color: #ff3f6c;
    color: #fff;
  }

  .sidebar {
    width: 250px;
    background-color: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  }
  .filter-title {
    font-size: 16px;
    font-weight: bold;
    margin-bottom: 10px;
    color: #333;
  }
  .filter-item a {
    text-decoration: none;
    color: #333;
    display: block;
    padding: 5px 0;
  }
  .filter-item a:hover {
    color: #ff3f6c;
  }
  
  .shop-content {
    flex: 1;
  }
  .search-bar {
    display: flex;
    justify-content: center;
    margin-bottom: 20px;
  }
  .search-button{
    border-radius: 20px;
  }
  .search-input {
    width: 300px;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 20px;
    outline: none;
  }
  .product-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 20px;
  }

  .product-card {
    background-color: white;
    padding: 15px;
    border-radius: 10px;
    text-align: center;
    position: relative;
    transition: transform 0.3s;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    display: flex;
    flex-direction: column;
    height: 100%;
  }
  .clear-filters {
    padding: 10px 0;
    margin-bottom: 15px;
  }

  .clear-btn {
    width: 100%;
    background-color: white;
    border: 1px solid #d4d5d9;
    padding: 8px 12px;
    border-radius: 3px;
    cursor: pointer;
    font-size: 13px;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 6px;
    color: #282c3f;
    font-weight: 600;
    text-transform: uppercase;
    transition: all 0.2s ease;
  }

  .clear-btn:hover {
    border-color: #ff3f6c;
    color: #ff3f6c;
  }

  .clear-btn::after {
    content: '×';
    font-size: 16px;
    font-weight: bold;
  }

  .clear-btn:hover {
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .product-card:hover {
    transform: scale(1.05);
  }

  .product-card img {
    width: 100%;
    height: 250px;
    object-fit: contain;
    border-radius: 8px;
    margin-bottom: 10px;
  }

  .product-card h5 {
    margin: 10px 0;
    font-size: 16px;
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    min-height: 40px;
  }

  .product-card p {
    margin: 10px 0;
    font-weight: bold;
    font-size: 18px;
  }

  .wishlist-btn {
    position: absolute;
    top: 10px;
    right: 10px;
    background-color: white;
    border: none;
    width: 32px;
    height: 32px;
    border-radius: 50%;
    cursor: pointer;
    z-index: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    transition: all 0.2s ease;
  }

  .wishlist-btn:hover {
    transform: scale(1.1);
  }

  .wishlist-btn i {
    color: #9e9e9e;
    font-size: 16px;
    transition: all 0.2s ease;
  }

  .wishlist-btn.in-wishlist i {
    color: #ff3f6c;
  }

  .product-card-content {
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
  }

  .add-to-cart-btn {
    width: 100%;
    padding: 12px;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: all 0.3s ease;
    margin-top: auto;
    font-size: 14px;
    font-weight: 600;
  }

  .add-to-cart-btn:not(:disabled) {
    background-color: #ff3f6c;
  }

  .add-to-cart-btn:not(:disabled):hover {
    background-color: #e6365d;
  }

  .add-to-cart-btn:disabled {
    background-color: #cccccc;
    cursor: not-allowed;
    opacity: 0.7;
    pointer-events: none;
    color: #666;
  }
  .offer-badge {
    position: absolute;
    top: 10px;
    left: 10px;
    background-color: #ff3f6c;
    color: white;
    padding: 5px 10px;
    border-radius: 5px;
    font-size: 12px;
    z-index: 1;
  }

  .offer-badge small {
    display: block;
    font-size: 10px;
    opacity: 0.8;
  }


  /* .badge {
  font-size: 0.75rem;
  padding: 5px 10px;
  z-index: 1;
}

.badge small {
  display: block;
  font-size: 0.6rem;
  opacity: 0.8;
} */
</style>

<div class="container">
  <aside class="sidebar">
    <% if (activeFilters.category || activeFilters.brand) { %>
      <div class="clear-filters">
        <button onclick="clearAllFilters()" class="clear-btn">
          Clear All Filters 
        </button>
      </div>
    <% } %>

    <div class="filter-section">
      <div class="filter-title">Categories</div>
      <% for(let i=0; i<category.length; i++) { %>
        <div class="filter-item">
          <a href="#" 
             onclick="filterByCategory('<%= category[i]._id %>')"
             class="<%= activeFilters.category === category[i]._id.toString() ? 'active-filter' : '' %>">
            <%= category[i].name %>
          </a>
        </div>
      <% } %>
    </div>
    <div class="filter-section">
      <div class="filter-title">Brands</div>
      <% for(let i=0; i<brand.length; i++) { %>
        <div class="filter-item">
          <a href="#" 
             onclick="filterByBrand('<%= brand[i]._id %>')"
             class="<%= activeFilters.brand === brand[i]._id.toString() ? 'active-filter' : '' %>">
            <%= brand[i].name %>
          </a>
        </div>
      <% } %>
    </div>
  </aside>

  <main class="shop-content">
    <div class="search-bar">
      <input type="text" class="search-input" placeholder="Search for products...">
      <button class="search-button">search</button>
    </div>
    
    <div class="sort-bar">
      <div class="sort-dropdown">
        <button class="sort-button" id="sortButton" onclick="toggleSortOptions()">
          Sort by <%= sortLabels[currentSort] || 'Featured' %>
        </button>
                    
     <input type="hidden" id="sort" value="<%= currentSort %>">
        <div class="sort-options" id="sortOptions">
           <div onclick="sortProducts('featured')">Featured</div>
          <div onclick="sortProducts('priceLowHigh')">Price: Low to High</div>
          <div onclick="sortProducts('priceHigh')">Price: High to Low</div>
          <div onclick="sortProducts('balance')">Stock Balance</div>
          <div onclick="sortProducts('nameAsc')">aA - zZ</div>
          <div onclick="sortProducts('nameDesc')">zZ - aA</div>   
      </div>
      </div>
    </div>
    <div class="product-grid">
      <% products.forEach(product => { %>
        <div class="product-card">
          <button class="wishlist-btn" onclick="toggleWishlist('<%= product._id %>', this)">
            <i class="fa-heart <%= product.inWishlist ? 'fas in-wishlist' : 'far' %>"></i>
          </button>
          <% if (product.activeOffer && product.activeOffer.percentage > 0) { %>
            <div class="offer-badge">
              <%= product.activeOffer.percentage %>% OFF
              <small>(<%= product.activeOffer.type === 'product' ? 'Product' : 'Category' %> Offer)</small>
              <small>Save ₹<%= product.activeOffer.savings.toLocaleString('en-IN') %></small>
            </div>
          <% } %>
          <div class="product-card-content">
            <a href="/productDetails?id=<%= product._id %>">
              <img src="/img/<%= product.productImage && product.productImage[0] %>" alt="<%= product.productName %>">
            </a>
            <h5><%= product.productName %></h5>
            <p>₹<%= product.salePrice.toLocaleString('en-IN') %></p>
            <h6 style="text-decoration: line-through;">₹<%= product.regularPrice.toLocaleString('en-IN') %></p>
            
            <% if (product.quantity && product.quantity > 0) { %>
              <button class="add-to-cart-btn" onclick="addToCart('<%=product._id%>')">
                Add to Cart
              </button>
            <% } else { %>
              <button class="add-to-cart-btn" disabled>
                Out of Stock
              </button>
            <% } %>
          </div>
        </div>
      <% }); %>
    </div>
  </main>
</div>

<!-- Pagination -->
<div class="pagination">
  <% if (currentPage > 1) { %>
    <a class="btn" href="/shop?page=<%= currentPage - 1 %>&sort=<%= currentSort %><%= activeFilters.category ? '&category=' + activeFilters.category : '' %><%= activeFilters.brand ? '&brand=' + activeFilters.brand : '' %>">Prev</a>
  <% } %>

  <% for (let i = 1; i <= totalPages; i++) { %>
    <a class="btn <%= currentPage === i ? 'active' : '' %>" 
       href="/shop?page=<%= i %>&sort=<%= currentSort %><%= activeFilters.category ? '&category=' + activeFilters.category : '' %><%= activeFilters.brand ? '&brand=' + activeFilters.brand : '' %>">
      <%= i %>
    </a>
  <% } %>

  <% if (currentPage < totalPages) { %>
    <a class="btn" href="/shop?page=<%= currentPage + 1 %>&sort=<%= currentSort %><%= activeFilters.category ? '&category=' + activeFilters.category : '' %><%= activeFilters.brand ? '&brand=' + activeFilters.brand : '' %>">Next</a>
  <% } %>
</div>

<%- include("../../views/layouts/user/footer") %>

<script>
  function applySorting() {
    const sortValue = document.getElementById("sortSelect").value;
    window.location.href = window.location.pathname + "?sort=" + sortValue;
  }

  function sortProducts(sortType) {
    const url = new URL(window.location.href);
    const params = new URLSearchParams(url.search);
    
    // Set the new sort parameter
    params.set('sort', sortType);
    
    // Reset to first page when sorting
    params.set('page', '1');
    
    // Preserve existing filters
    const category = params.get('category');
    const brand = params.get('brand');
    const search = params.get('search');
    
    // Build the new URL with all parameters
    let newUrl = `${url.pathname}?sort=${sortType}`;
    if (category) newUrl += `&category=${category}`;
    if (brand) newUrl += `&brand=${brand}`;
    if (search) newUrl += `&search=${search}`;
    newUrl += '&page=1';
    
    window.location.href = newUrl;
  }

  function toggleSortOptions() {
    const options = document.getElementById('sortOptions');
    options.style.display = options.style.display === 'none' ? 'block' : 'none';
  }

  document.addEventListener('click', function(event) {
    const sortButton = document.getElementById('sortButton');
    const sortOptions = document.getElementById('sortOptions');
    if (!sortButton.contains(event.target)) {
        sortOptions.style.display = 'none';
    }
  });

function addToCart(productId) {
    fetch('/cart', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ productId })
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        return response.json();
    })
    .then(data => {
        if (data.success) {
            Swal.fire({
                icon: 'success',
                title: 'Added to Cart',
                text: 'Product added to your cart',
                showConfirmButton: false,
                timer: 1500
            });
        } else {
            if (data.redirectToLogin) {
                window.location.href = '/login';
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: data.message || 'Something went wrong'
                });
            }
        }
    })
    .catch(error => {
        console.error('Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: 'An error occurred while adding the product to your cart.'
        });
    });
}




function updateCartCount(count) {
  const cartCountElement = document.querySelector('.cart-count');
  if (cartCountElement) {
    cartCountElement.textContent = count;
  }
}

  function toggleWishlist(productId, button) {
  fetch('/wishlist', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({ productId })
  })
  .then(response => {
    if (!response.ok) {
      throw new Error('Network response was not ok');
    }
    return response.json();
  })
  .then(data => {
    if (data.success) {
      const icon = button.querySelector('i');
      if (data.action === 'added') {
        icon.classList.remove('far');
        icon.classList.add('fas', 'in-wishlist');
        button.classList.add('in-wishlist');
        
        Swal.fire({
          icon: 'success',
          title: 'Added to Wishlist',
          text: 'Product added to your wishlist',
          showConfirmButton: false,
          timer: 1500
        });
      } else {
        icon.classList.remove('fas', 'in-wishlist');
        icon.classList.add('far');
        button.classList.remove('in-wishlist');
        
        Swal.fire({
          icon: 'info',
          title: 'Removed from Wishlist',
          text: 'Product removed from your wishlist',
          showConfirmButton: false,
          timer: 1500
        });
      }
    } else {
      if (data.redirectToLogin) {
        window.location.href = '/login';
      } else {
        Swal.fire({
          icon: 'error',
          title: 'Oops...',
          text: data.message || 'Something went wrong'
        });
      }
    }
  })
  .catch(error => {
    console.error('Error:', error);
    Swal.fire({
      icon: 'error',
      title: 'Error!',
      text: 'An error occurred while updating your wishlist.'
    });
  });
}
  document.querySelector(".search-button").addEventListener("click", function() {
    performSearch();
  });

  document.querySelector(".search-input").addEventListener("keyup", function(event) {
    if (event.key === "Enter") { 
      performSearch();
    }
  });

  function performSearch() {
  const searchQuery = document.querySelector(".search-input").value.trim(); 
  if (searchQuery) { 
    const url = new URL(window.location.href);
    const params = new URLSearchParams(url.search);
    const sort = params.get('sort');
    const page = params.get('page');
    params.delete('category');
    params.delete('brand');
    params.set('search', searchQuery);
    if (sort) params.set('sort', sort);
    params.set('page', '1');
    window.location.href = `${url.pathname}?${params.toString()}`;
  }
}

  function filterByCategory(categoryId) {
    const url = new URL(window.location.href);
    const params = new URLSearchParams(url.search);
    params.set('category', categoryId);
    params.set('page', '1'); // Reset to first page when filtering
    params.delete('brand'); // Remove brand filter when category is selected
    window.location.href = `${url.pathname}?${params.toString()}`;
  }

  function filterByBrand(brandId) {
    const url = new URL(window.location.href);
    const params = new URLSearchParams(url.search);
    params.set('brand', brandId);
    params.set('page', '1'); // Reset to first page when filtering
    params.delete('category'); // Remove category filter when brand is selected
    window.location.href = `${url.pathname}?${params.toString()}`;
  }

  function clearAllFilters() {
    const url = new URL(window.location.href);
    const params = new URLSearchParams(url.search);
    // Preserve sort and page if needed
    const sort = params.get('sort');
    params.delete('category');
    params.delete('brand');
    params.delete('search');
    if (sort) params.set('sort', sort);
    params.set('page', '1');
    window.location.href = `${url.pathname}?${params.toString()}`;
  }

  function clearCategoryFilter() {
    const url = new URL(window.location.href);
    const params = new URLSearchParams(url.search);
    params.delete('category');
    params.set('page', '1');
    window.location.href = `${url.pathname}?${params.toString()}`;
  }

  function clearBrandFilter() {
    const url = new URL(window.location.href);
    const params = new URLSearchParams(url.search);
    params.delete('brand');
    params.set('page', '1');
    window.location.href = `${url.pathname}?${params.toString()}`;
  }

  function clearSearch() {
    const url = new URL(window.location.href);
    const params = new URLSearchParams(url.search);
    params.delete('search');
    params.set('page', '1');
    window.location.href = `${url.pathname}?${params.toString()}`;
  }

  function toggleSortOptions() {
    const options = document.getElementById('sortOptions');
    const button = document.getElementById('sortButton');
    const isVisible = options.style.display === 'block';
    
    options.style.display = isVisible ? 'none' : 'block';
    button.classList.toggle('active', !isVisible);
  }

  // Close dropdown when clicking outside
  document.addEventListener('click', function(event) {
    const sortButton = document.getElementById('sortButton');
    const sortOptions = document.getElementById('sortOptions');
    if (!sortButton.contains(event.target)) {
      sortOptions.style.display = 'none';
      sortButton.classList.remove('active');
    }
  });
</script>