<%- include("../../views/layouts/admin/header") %>
<style>
  .admin-orders-container img {
    width: 40px;
    height: 40px;
    border-radius: 5px;
}

  .content-main {
    margin-left: 20rem;
  }

  .stats-grid {
    display: flex;
    flex-wrap: nowrap;
    gap: 1.5rem;
    margin-bottom: 1.5rem;
    overflow-x: auto;
    justify-content: space-between;
  }

  .stat-card {
    flex: 1;
    min-width: 200px;
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    padding: 1.25rem;
    text-align: center;
    transition: transform 0.2s ease, box-shadow 0.2s;
  }

  .stat-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 8px rgba(4px, 8px, 0, 0.15))
  }
 

  .stat-card h3 {
    font-size: 0.9rem;
    font-weight: 600;
    color: #555;
    margin-bottom: 0.5rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .stat-card p {
    font-size: 1.5rem;
    font-weight: 700;
    color: #333;
    margin: 0;
  }

  @media (max-width: 768px) {
    .stats-grid {
      flex-wrap: column;
      justify-content: center;
    }

    .stat-card {
      flex: 0 1 45%;
      margin-bottom: 1rem;
    }
  }

  @media (max-width: 480px) {
    .stat-card {
      flex: 0 1 100%;
    }
  }

  .admin-orders-container table {
    font-size: 0.9rem;
    width: 100%;
    border-collapse: collapse;
  }

  .admin-orders-container th,
  .admin-orders-container td {
    padding: 0.75rem;
    text-align: left;
    border-bottom: 1px solid #ddd;
  }

  .admin-orders-container th {
    background-color: #f8f8f8;
    font-weight: 600;
  }

  .table-container {
    overflow-x: auto;
  }

  .admin-orders-container img {
    width: 40px;
    height: 40px;
    border-radius: 5px;
  }

  .admin-orders-container select {
    padding: 0.4rem 0.8rem;
    font-size: 0.9rem;
    border: 1px solid #ccc;
    border-radius: 4px;
    background-color: #fff;
  }

  .approve-btn {
    background-color: #28a745;
    color: white;
    padding: 0.4rem 0.8rem;
    border-radius: 4px;
    border: none;
    cursor: pointer;
  }

  .approve-btn:disabled {
    background-color: #cccccc;
    cursor: not-allowed;
  }

  .product-status-select option[value="Processing"] {
    color: #ffa500;
  }

  .product-status-select option[value="Shipped"] {
    color: #1e90ff;
  }

  .product-status-select option[value="Delivered"] {
    color: #28a745;
  }

  .product-status-select option[value="Cancelled"] {
    color: #dc3545;
  }

  /* Pagination Styles */
  .pagination-container {
    display: flex;
    justify-content: center;
    margin-top: 1.5rem;
  }

  .pagination {
    display: flex;
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .pagination li {
    margin: 0 0.25rem;
  }

  .pagination a {
    display: inline-block;
    padding: 0.5rem 1rem;
    border: 1px solid #ddd;
    border-radius: 4px;
    color: #333;
    text-decoration: none;
    font-size: 0.9rem;
    transition: background-color 0.2s, color 0.2s;
  }

  .pagination a:hover {
    background-color: #f8f8f8;
  }

  .pagination .active a {
    background-color: #ff3f6c;
    color: white;
    border-color: #ff3f6c;
  }

  .pagination .disabled a {
    color: #ccc;
    cursor: not-allowed;
    pointer-events: none;
  }

 .view-Details {
  padding: 8px 16px;
  background-color: #007BFF; /* Bootstrap blue */
  color: white;
  border: none;
  border-radius: 4px;
  font-size: 14px;
  cursor: pointer;
  transition: background-color 0.3s ease, transform 0.2s ease;
}

.view-Details:hover {
  background-color: #0056b3;
  transform: translateY(-2px);
}

.view-Details:active {
  transform: translateY(0);
  background-color: #004494;
}

</style>

<section class="content-main">
  <div class="admin-orders-container">
    <div class="admin-orders-container">
      <div class="stats-grid">
        <div class="stat-card">
          <h3>Total Orders</h3>
          <p><%= totalOrders %></p>
        </div>
        <div class="stat-card">
          <h3>Total Revenue</h3>
          <p>₹<%= totalRevenue.toLocaleString('en-IN') %></p>
        </div>
        <div class="stat-card">
          <h3>Pending Orders</h3>
          <p><%= orderCounts['Processing'] || 0 %></p>
        </div>
        <div class="stat-card">
          <h3>Delivered Orders</h3>
          <p><%= orderCounts['Delivered'] || 0 %></p>
        </div>
      </div>
    </div>

    <div class="bg-white rounded-lg shadow p-4 mb-6">
      <form method="GET" class="flex gap-4 items-center">
        <label class="text-sm font-medium text-gray-700">Filter by Status:</label>
        <select name="status" class="form-select rounded-md border-gray-300 p-2" onchange="this.form.submit()">
          <option value="">All Status</option>
          <option value="Processing" <%= selectedStatus === 'Processing' ? 'selected' : '' %>>Processing</option>
          <option value="Shipped" <%= selectedStatus === 'Shipped' ? 'selected' : '' %>>Shipped</option>
          <option value="Delivered" <%= selectedStatus === 'Delivered' ? 'selected' : '' %>>Delivered</option>
          <option value="Cancelled" <%= selectedStatus === 'Cancelled' ? 'selected' : '' %>>Cancelled</option>
        </select>
      </form>
    </div>

    <div class="table-container bg-white rounded-lg shadow">
      <table class="min-w-full text-sm">
        <thead class="bg-gray-100">
          <tr>
            <th class="p-4 text-left font-medium text-gray-600">Order No</th>
            <th class="p-4 text-left font-medium text-gray-600">Customer</th>
            <th class="p-4 text-left font-medium text-gray-600">Items</th>
            <th class="p-4 text-left font-medium text-gray-600">Total</th>
            <th class="p-4 text-left font-medium text-gray-600">Date</th>
            <th class="p-4 text-left font-medium text-gray-600">Actions</th>
          </tr>
        </thead>
        <tbody class="bg-white divide-y divide-gray-200">
          <% orders.forEach((order, index) => { %>
            <tr class="hover:bg-gray-50">
              <td class="p-4 text-gray-800 font-medium"><%= (currentPage - 1) * 10 + index + 1 %></td>
              <td class="p-4">
                <% if (order.user) { %>
                  <p class="text-gray-900 font-medium"><%= order.user.name %></p>
                  <p class="text-gray-500 text-xs"><%= order.user.email %></p>
                <% } else { %>
                  <p class="text-gray-900 font-medium">User Deleted</p>
                  <p class="text-gray-500 text-xs">No user data available</p>
                <% } %>
              </td>
              <td class="p-4">
                <% order.orderedItems.forEach(item => { %>
                  <% if (item.product) { %>
                    <div class="flex items-center gap-3 mb-2">
        <img src="/img/<%= item.product.productImage ? item.product.productImage[0] : 'default.jpg' %>"
     alt="<%= item.product.productName || 'Unknown Product' %>" class="rounded">
                      <div class="flex flex-col">
                        <span><%= item.product.productName || 'Product Removed' %> x <%= item.quantity %></span>
                        <select class="form-select product-status-select rounded-md border-gray-300 p-2 mt-1"
                                data-order-id="<%= order._id %>"
                                data-item-id="<%= item._id %>">
                          <option value="Pending"
                                  <%= item.status === 'Pending' ? 'selected' : '' %>
                                  <%= ['Processing', 'Shipped', 'Delivered', 'Cancelled', 'Return Request', 'Returned'].includes(item.status) ? 'disabled' : '' %>>Pending</option>
                          <option value="Processing"
                                  <%= item.status === 'Processing' ? 'selected' : '' %>
                                  <%= ['Shipped', 'Delivered', 'Cancelled', 'Return Request', 'Returned'].includes(item.status) ? 'disabled' : '' %>>Processing</option>
                          <option value="Shipped"
                                  <%= item.status === 'Shipped' ? 'selected' : '' %>
                                  <%= ['Delivered', 'Cancelled', 'Return Request', 'Returned'].includes(item.status) ? 'disabled' : '' %>>Shipped</option>
                          <option value="Delivered"
                                  <%= item.status === 'Delivered' ? 'selected' : '' %>
                                  <%= ['Cancelled', 'Returned'].includes(item.status) ? 'disabled' : '' %>>Delivered</option>
                          <option value="Cancelled"
                                  <%= item.status === 'Cancelled' ? 'selected' : '' %>
                                  <%= ['Shipped', 'Delivered', 'Return Request', 'Returned'].includes(item.status) ? 'disabled' : '' %>>Cancelled</option>
                          <option value="Return Request"
                                  <%= item.status === 'Return Request' ? 'selected' : '' %>
                                  <%= item.status !== 'Delivered' ? 'disabled' : '' %>>Return Request</option>
                          <option value="Returned"
                                  <%= item.status === 'Returned' ? 'selected' : '' %>
                                  <%= item.status !== 'Return Request' ? 'disabled' : '' %>>Returned</option>
                        </select>
                      </div>
                    </div>
                  <% } else { %>
                    <div class="flex items-center gap-3 mb-2">
                      <span class="text-red-500">Product Not Available</span>
                    </div>
                  <% } %>
                <% }) %>
              </td>
              <td class="p-4 font-medium text-gray-800">₹<%= order.finalAmount.toLocaleString('en-IN') %></td>
              <td class="p-4 text-gray-800"><%= new Date(order.createdAt).toLocaleDateString('en-IN') %></td>
              <td class="p-4">
            <button 
              onclick="window.location.href='/admin/order/<%= order._id %>'" 
              class="bg-blue-600 text-black px-4 py-2 rounded hover:bg-blue-700 transition duration-200"
              >
             View Details
              </button>

                <% if (order.orderedItems.some(item => item.status === 'Return Request')) { %>
                  <button class="approve-btn" onclick="approveReturn('<%= order._id %>')">Approve Return</button>
                <% } %>
              </td>
            </tr>
          <% }) %>
        </tbody>
      </table>

      <!-- Pagination Controls -->
      <% if (totalPages > 1) { %>
        <div class="pagination-container">
          <ul class="pagination">
            <!-- Previous Button -->
            <li class="page-item <%= currentPage === 1 ? 'disabled' : '' %>">
              <a href="?page=<%= currentPage - 1 %><%= selectedStatus ? '&status=' + selectedStatus : '' %>" class="page-link">Previous</a>
            </li>

            <!-- Page Numbers -->
            <% 
              const maxPagesToShow = 5;
              let startPage = Math.max(1, currentPage - Math.floor(maxPagesToShow / 2));
              let endPage = Math.min(totalPages, startPage + maxPagesToShow - 1);
              if (endPage - startPage + 1 < maxPagesToShow) {
                startPage = Math.max(1, endPage - maxPagesToShow + 1);
              }
            %>
            <% if (startPage > 1) { %>
              <li class="page-item">
                <a href="?page=1<%= selectedStatus ? '&status=' + selectedStatus : '' %>" class="page-link">1</a>
              </li>
              <% if (startPage > 2) { %>
                <li class="page-item disabled">
                  <span class="page-link">...</span>
                </li>
              <% } %>
            <% } %>
            <% for (let i = startPage; i <= endPage; i++) { %>
              <li class="page-item <%= currentPage === i ? 'active' : '' %>">
                <a href="?page=<%= i %><%= selectedStatus ? '&status=' + selectedStatus : '' %>" class="page-link"><%= i %></a>
              </li>
            <% } %>
            <% if (endPage < totalPages) { %>
              <% if (endPage < totalPages - 1) { %>
                <li class="page-item disabled">
                  <span class="page-link">...</span>
                </li>
              <% } %>
              <li class="page-item">
                <a href="?page=<%= totalPages %><%= selectedStatus ? '&status=' + selectedStatus : '' %>" class="page-link"><%= totalPages %></a>
              </li>
            <% } %>

            <!-- Next Button -->
            <li class="page-item <%= currentPage === totalPages ? 'disabled' : '' %>">
              <a href="?page=<%= currentPage + 1 %><%= selectedStatus ? '&status=' + selectedStatus : '' %>" class="page-link">Next</a>
            </li>
          </ul>
        </div>
      <% } %>
    </div>
  </div>
</section>

<script>
  async function checkResponse(response) {
    if (response.status === 401) {
      await Swal.fire({
        title: 'Session Expired!',
        text: 'Session expired. Redirecting to login page...',
        icon: 'warning',
        confirmButtonColor: '#ff3f6c'
      });
      window.location.href = '/admin/login';
      throw new Error('Session expired');
    }

    const contentType = response.headers.get('content-type');
    if (!contentType || !contentType.includes('application/json')) {
      throw new Error('Received non-JSON response. You might need to log in again.');
    }
    return response.json();
  }

  document.querySelectorAll('.product-status-select').forEach(select => {
    select.addEventListener('change', async function() {
      const orderId = this.dataset.orderId;
      const itemId = this.dataset.itemId;
      const status = this.value;
      const originalStatus = this.querySelector('[selected]').value;

      if (this.querySelector(`option[value="${status}"]`).disabled) {
        this.value = originalStatus;
        return;
      }

      try {
        const response = await fetch('/admin/order/update-item-status', {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify({ orderId, itemId, status })
        });
        const data = await checkResponse(response);

        if (data.success) {
          const successMessage = document.createElement('div');
          successMessage.className = 'text-green-500 text-sm mt-2';
          successMessage.textContent = 'Product status updated successfully';
          this.parentNode.appendChild(successMessage);
          setTimeout(() => successMessage.remove(), 3000);
        } else {
          throw new Error(data.message || 'Failed to update status');
        }
      } catch (error) {
        console.error('Error:', error);
        const errorMessage = document.createElement('div');
        errorMessage.className = 'text-red-500 text-sm mt-2';
        errorMessage.textContent = error.message || 'Failed to update status';
        this.parentNode.appendChild(errorMessage);
        setTimeout(() => errorMessage.remove(), 3000);
        this.value = originalStatus;
      }
    });
  });

  async function approveReturn(orderId) {
    const result = await Swal.fire({
      title: 'Are you sure?',
      text: 'This will approve the return request, update stock, and refund the user.',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#ff3f6c',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Yes, approve it!',
      cancelButtonText: 'Cancel'
    });
    if (result.isConfirmed) {
      try {
        const response = await fetch('/admin/order/approve-return', {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify({ orderId })
        });
        const data = await checkResponse(response);

        if (data.success) {
          await Swal.fire({
            title: 'Success!',
            text: 'Return approved successfully!',
            icon: 'success',
            confirmButtonColor: '#ff3f6c'
          });
          window.location.reload();
        } else {
          throw new Error(data.message || 'Failed to approve return');
        }
      } catch (error) {
        console.error('Error:', error);
        await Swal.fire({
          title: 'Error!',
          text: error.message || 'Failed to approve return',
          icon: 'error',
          confirmButtonColor: '#ff3f6c'
        });
      }
    }
  }
</script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<%- include('../../views/layouts/admin/footer') %>